import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  ParseUUIDPipe, // Use ParseIntPipe if your ID is numeric in Prisma schema
  UsePipes,
  ValidationPipe,
  HttpCode,
  HttpStatus,
} from '@nestjs/common';
import { CategoriesService } from './categories.service';
import { CreateCategoryDto } from './dto/create-category.dto';
import { UpdateCategoryDto } from './dto/update-category.dto';
// Import the Category type generated by Prisma
import { Category } from '@prisma/client';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiParam,
  ApiBody,
} from '@nestjs/swagger'; // Optional: For API documentation
import { Public } from 'src/decorators/public.decorator';

@ApiTags('categories') // Optional: Group endpoints in Swagger UI
@Controller('categories')
export class CategoriesController {
  // Inject the CategoriesService
  constructor(private readonly categoriesService: CategoriesService) {}

  /**
   * Creates a new category.
   * Applies validation pipe to the incoming body.
   */
  @Post()
  /* @UsePipes(new ValidationPipe({ whitelist: true, forbidNonWhitelisted: true })) // Validate DTO  */
  @ApiOperation({ summary: 'Create a new category' }) // Optional: Swagger description
  @ApiBody({ type: CreateCategoryDto }) // Optional: Swagger body definition
  @ApiResponse({
    status: HttpStatus.CREATED,
    description: 'The category has been successfully created.',
    type: Object,
  }) // Use Prisma type if swagger plugin configured, else 'object' or a specific DTO
  @ApiResponse({
    status: HttpStatus.BAD_REQUEST,
    description: 'Invalid input data.',
  })
  @ApiResponse({
    status: HttpStatus.CONFLICT,
    description: 'Category name already exists.',
  })
  async create(
    @Body() createCategoryDto: CreateCategoryDto,
  ): Promise<Category> {
    // Delegate creation logic to the service
    return this.categoriesService.create(createCategoryDto);
  }

  /**
   * Retrieves all categories.
   */
  @Public()
  @Get()
  @ApiOperation({ summary: 'Get all categories' }) // Optional: Swagger
  @ApiResponse({
    status: HttpStatus.OK,
    description: 'Returns all categories.',
    type: Object,
  }) // Use Prisma type if swagger plugin configured
  async findAll(): Promise<Category[]> {
    // Delegate fetching logic to the service
    return this.categoriesService.findAll();
  }

  /**
   * Retrieves a specific category by its ID.
   * Uses ParseUUIDPipe to validate the ID format (adjust if using numeric IDs).
   */
  @Get(':id')
  @ApiOperation({ summary: 'Get a category by ID' }) // Optional: Swagger
  @ApiParam({
    name: 'id',
    description: 'The UUID of the category to retrieve',
    type: String,
  }) // Optional: Swagger param description (use 'type: Number' if applicable)
  @ApiResponse({
    status: HttpStatus.OK,
    description: 'Returns the specified category.',
    type: 'object',
  }) // Use Prisma type if swagger plugin configured
  @ApiResponse({
    status: HttpStatus.NOT_FOUND,
    description: 'Category not found.',
  })
  async findOne(
    // Use ParseUUIDPipe (or ParseIntPipe) to validate and potentially transform the ID
    @Param('id', ParseUUIDPipe) id: string,
  ): Promise<Category> {
    // Service handles the NotFoundException
    const category = await this.categoriesService.findOne(id);
    return category;
  }

  /**
   * Updates a specific category by its ID.
   * Applies validation pipe to the incoming body.
   * Uses ParseUUIDPipe for the ID.
   */
  @Patch(':id')
  @UsePipes(new ValidationPipe({ whitelist: true, forbidNonWhitelisted: true })) // Validate DTO
  @ApiOperation({ summary: 'Update a category by ID' }) // Optional: Swagger
  @ApiParam({
    name: 'id',
    description: 'The UUID of the category to update',
    type: String,
  }) // Optional: Swagger
  @ApiBody({ type: UpdateCategoryDto }) // Optional: Swagger
  @ApiResponse({
    status: HttpStatus.OK,
    description: 'The category has been successfully updated.',
    type: Object,
  }) // Use Prisma type if swagger plugin configured
  @ApiResponse({
    status: HttpStatus.BAD_REQUEST,
    description: 'Invalid input data.',
  })
  @ApiResponse({
    status: HttpStatus.NOT_FOUND,
    description: 'Category not found.',
  })
  @ApiResponse({
    status: HttpStatus.CONFLICT,
    description: 'Category name already exists.',
  })
  async update(
    @Param('id', ParseUUIDPipe) id: string,
    @Body() updateCategoryDto: UpdateCategoryDto,
  ): Promise<Category> {
    // Delegate update logic to the service. The service handles 'not found' and 'conflict'.
    return this.categoriesService.update(id, updateCategoryDto);
  }

  /**
   * Deletes a specific role by its ID.
   * Uses ParseUUIDPipe for the ID.
   * Returns HTTP 204 No Content on successful deletion.
   */
  @Delete(':id')
  @HttpCode(HttpStatus.NO_CONTENT) // Set standard HTTP status for successful deletion
  @ApiOperation({ summary: 'Delete a category by ID' }) // Optional: Swagger
  @ApiParam({
    name: 'id',
    description: 'The UUID of the category to delete',
    type: String,
  }) // Optional: Swagger
  @ApiResponse({
    status: HttpStatus.NO_CONTENT,
    description: 'The category has been successfully deleted.',
  }) // Optional: Swagger
  @ApiResponse({
    status: HttpStatus.NOT_FOUND,
    description: 'Category not found.',
  })
  async remove(@Param('id', ParseUUIDPipe) id: string): Promise<void> {
    await this.categoriesService.remove(id);
  }
}
